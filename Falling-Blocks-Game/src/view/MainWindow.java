package view;

import Controllers.SoundController;
import Controllers.LogExceptionController;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Iterator;
import javax.swing.JLabel;
import javax.swing.Timer;
import Controllers.Game;
import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.SwingUtilities;
import model.Block;
import model.Piece;

/**
 * Represents the main window of the Tetris game.
 *
 * <p>
 * Created by Carlos Fraile - ThePandogs</p>
 *
 * <p>
 * The MainWindow class serves as the main window for the Tetris game. It
 * contains timers for game events, controllers for managing sounds and
 * exceptions, and variables for keeping track of game scores and time.</p>
 *
 * <p>
 * The class includes constants for scoring rules and countdown times, as well
 * as methods for initializing the window components and setting up the
 * game.</p>
 *
 * @author Carlos Fraile - ThePandogs
 */
public class MainWindow extends javax.swing.JFrame {
//TIMER

    private Timer timer, timerSpeedGame, timerFPS, scoreCounterTimer, timerCountDown;

//Controllers
    private final SoundController soundController;
    private final LogExceptionController logException;
    private Game game;

//Score
    private final int SCORELINE = 45;
    private final int SCORETOUCHFLOOR = 15;
    private final int SCORELEVELUP = 70;
    private final int TimeCountDown = 3;
    private int gameTime, score, speedGameDelay, actualCountDown;

    private int scoreToAdd = 0;
    private final int BLOCKINCREASELEVEL = 3;
    private final int TIMEINCREASESBLOCK = 20;

    private int initialPositionNextFigureX;

    /**
     * Constructs a new MainWindow object.
     */
    public MainWindow() {
        initComponents();
        initialPositionNextFigureX = panelNextFigure.getX();
        logException = new LogExceptionController();
        soundController = new SoundController(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pausePanel = new javax.swing.JPanel();
        pauseTitle = new javax.swing.JLabel();
        restartPause = new javax.swing.JButton();
        mainMenuPause = new javax.swing.JButton();
        gameOverPanel = new javax.swing.JPanel();
        youLoseTitle = new javax.swing.JLabel();
        levelTile = new javax.swing.JLabel();
        timeTitle = new javax.swing.JLabel();
        scoreTitle = new javax.swing.JLabel();
        linesTitle = new javax.swing.JLabel();
        linesGameOver = new javax.swing.JLabel();
        scoreGameOver = new javax.swing.JLabel();
        timeGameOver = new javax.swing.JLabel();
        levelGameOver = new javax.swing.JLabel();
        borderlbl = new javax.swing.JLabel();
        restartGameOver = new javax.swing.JButton();
        mainMenuGameOver = new javax.swing.JButton();
        gameJPanel = new javax.swing.JPanel();
        countdownPanel = new javax.swing.JPanel();
        numberCountdown = new javax.swing.JLabel();
        backgroundCronoStart = new javax.swing.JLabel();
        tglPause = new javax.swing.JToggleButton();
        gamePanel = new javax.swing.JPanel();
        lblBackgroundGame = new javax.swing.JLabel();
        panelScore = new javax.swing.JPanel();
        lblScoreTitle = new javax.swing.JLabel();
        lblScore = new javax.swing.JLabel();
        panelNext = new javax.swing.JPanel();
        lblNextTitle = new javax.swing.JLabel();
        panelNextFigure = new javax.swing.JPanel();
        panelLevel = new javax.swing.JPanel();
        lblLevelTitle = new javax.swing.JLabel();
        progressLevel = new style.CircleProgressBar();
        lblLevel = new javax.swing.JLabel();
        panelLine = new javax.swing.JPanel();
        lblLineTitle = new javax.swing.JLabel();
        lblLine = new javax.swing.JLabel();
        panelTime = new javax.swing.JPanel();
        lblTime = new javax.swing.JLabel();
        lblTimeTitle = new javax.swing.JLabel();
        backgroundProgram = new javax.swing.JLabel();
        menuJPanel = new javax.swing.JPanel();
        panelMainMenu = new javax.swing.JPanel();
        Playlbl = new javax.swing.JLabel();
        Exitlbl = new javax.swing.JLabel();
        levelJSlider = new javax.swing.JSlider();
        levelLbl = new javax.swing.JLabel();
        levlLblTitle = new javax.swing.JLabel();
        panelMainMenuBorder = new javax.swing.JLabel();
        backgroundImage = new javax.swing.JLabel();
        backgroundColor = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1100, 950));
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(1100, 950));
        getContentPane().setLayout(null);

        pausePanel.setBackground(new java.awt.Color(51, 51, 51));
        pausePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pausePanel.setForeground(new java.awt.Color(255, 255, 255));
        pausePanel.setAlignmentX(0.0F);
        pausePanel.setAlignmentY(0.0F);
        pausePanel.setMaximumSize(new java.awt.Dimension(450, 330));
        pausePanel.setMinimumSize(new java.awt.Dimension(450, 330));
        pausePanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pausePanelKeyPressed(evt);
            }
        });
        pausePanel.setLayout(null);
        pausePanel.setVisible(false);

        pauseTitle.setFont(new java.awt.Font("Segoe UI", 1, 65)); // NOI18N
        pauseTitle.setForeground(new java.awt.Color(255, 255, 255));
        pauseTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pauseTitle.setText("Pause");
        pausePanel.add(pauseTitle);
        pauseTitle.setBounds(30, 20, 390, 80);

        restartPause.setBackground(new java.awt.Color(30, 30, 30));
        restartPause.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        restartPause.setForeground(new java.awt.Color(255, 255, 255));
        restartPause.setText("Restart");
        restartPause.setFocusable(false);
        restartPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartPauseActionPerformed(evt);
            }
        });
        pausePanel.add(restartPause);
        restartPause.setBounds(110, 200, 230, 40);

        mainMenuPause.setBackground(new java.awt.Color(30, 30, 30));
        mainMenuPause.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        mainMenuPause.setForeground(new java.awt.Color(255, 255, 255));
        mainMenuPause.setText("MainMenu");
        mainMenuPause.setFocusable(false);
        mainMenuPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuPauseActionPerformed(evt);
            }
        });
        pausePanel.add(mainMenuPause);
        mainMenuPause.setBounds(110, 260, 230, 40);

        getContentPane().add(pausePanel);
        pausePanel.setBounds(325, 340, 450, 330);

        gameOverPanel.setBackground(new java.awt.Color(51, 51, 51));
        gameOverPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gameOverPanel.setForeground(new java.awt.Color(255, 255, 255));
        gameOverPanel.setMaximumSize(new java.awt.Dimension(450, 330));
        gameOverPanel.setMinimumSize(new java.awt.Dimension(450, 330));
        gameOverPanel.setPreferredSize(new java.awt.Dimension(450, 330));
        gameOverPanel.setLayout(null);
        gameOverPanel.setVisible(false);

        youLoseTitle.setFont(new java.awt.Font("Segoe UI", 1, 65)); // NOI18N
        youLoseTitle.setForeground(new java.awt.Color(255, 255, 255));
        youLoseTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        youLoseTitle.setText("Game Over");
        gameOverPanel.add(youLoseTitle);
        youLoseTitle.setBounds(30, 20, 390, 80);

        levelTile.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        levelTile.setForeground(new java.awt.Color(255, 255, 255));
        levelTile.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        levelTile.setText("Level");
        levelTile.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gameOverPanel.add(levelTile);
        levelTile.setBounds(140, 130, 70, 32);

        timeTitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        timeTitle.setForeground(new java.awt.Color(255, 255, 255));
        timeTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeTitle.setText("Time");
        timeTitle.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gameOverPanel.add(timeTitle);
        timeTitle.setBounds(340, 130, 70, 32);

        scoreTitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        scoreTitle.setForeground(new java.awt.Color(255, 255, 255));
        scoreTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreTitle.setText("Score");
        scoreTitle.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gameOverPanel.add(scoreTitle);
        scoreTitle.setBounds(40, 130, 70, 30);

        linesTitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        linesTitle.setForeground(new java.awt.Color(255, 255, 255));
        linesTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        linesTitle.setText("Lines");
        linesTitle.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gameOverPanel.add(linesTitle);
        linesTitle.setBounds(240, 130, 70, 32);

        linesGameOver.setBackground(new java.awt.Color(255, 255, 255));
        linesGameOver.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        linesGameOver.setForeground(new java.awt.Color(255, 255, 255));
        linesGameOver.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        linesGameOver.setText("0");
        linesGameOver.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        linesGameOver.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gameOverPanel.add(linesGameOver);
        linesGameOver.setBounds(240, 160, 70, 30);

        scoreGameOver.setBackground(new java.awt.Color(255, 255, 255));
        scoreGameOver.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        scoreGameOver.setForeground(new java.awt.Color(255, 255, 255));
        scoreGameOver.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreGameOver.setText("0");
        scoreGameOver.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        scoreGameOver.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gameOverPanel.add(scoreGameOver);
        scoreGameOver.setBounds(40, 160, 70, 30);

        timeGameOver.setBackground(new java.awt.Color(255, 255, 255));
        timeGameOver.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        timeGameOver.setForeground(new java.awt.Color(255, 255, 255));
        timeGameOver.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeGameOver.setText("0");
        timeGameOver.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        timeGameOver.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gameOverPanel.add(timeGameOver);
        timeGameOver.setBounds(340, 160, 70, 30);

        levelGameOver.setBackground(new java.awt.Color(255, 255, 255));
        levelGameOver.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        levelGameOver.setForeground(new java.awt.Color(255, 255, 255));
        levelGameOver.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        levelGameOver.setText("0");
        levelGameOver.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        levelGameOver.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gameOverPanel.add(levelGameOver);
        levelGameOver.setBounds(140, 160, 70, 30);

        borderlbl.setForeground(new java.awt.Color(255, 255, 255));
        borderlbl.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gameOverPanel.add(borderlbl);
        borderlbl.setBounds(20, 130, 410, 70);

        restartGameOver.setBackground(new java.awt.Color(30, 30, 30));
        restartGameOver.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        restartGameOver.setForeground(new java.awt.Color(255, 255, 255));
        restartGameOver.setText("Restart");
        restartGameOver.setFocusable(false);
        restartGameOver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartGameOverActionPerformed(evt);
            }
        });
        gameOverPanel.add(restartGameOver);
        restartGameOver.setBounds(110, 220, 230, 40);

        mainMenuGameOver.setBackground(new java.awt.Color(30, 30, 30));
        mainMenuGameOver.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        mainMenuGameOver.setForeground(new java.awt.Color(255, 255, 255));
        mainMenuGameOver.setText("MainMenu");
        mainMenuGameOver.setFocusable(false);
        mainMenuGameOver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuGameOverActionPerformed(evt);
            }
        });
        gameOverPanel.add(mainMenuGameOver);
        mainMenuGameOver.setBounds(110, 270, 230, 40);

        getContentPane().add(gameOverPanel);
        gameOverPanel.setBounds(325, 340, 450, 330);

        gameJPanel.setBackground(new java.awt.Color(102, 102, 102));
        gameJPanel.setMaximumSize(new java.awt.Dimension(1100, 950));
        gameJPanel.setMinimumSize(new java.awt.Dimension(1100, 950));
        gameJPanel.setPreferredSize(new java.awt.Dimension(1100, 950));
        gameJPanel.setRequestFocusEnabled(false);
        gameJPanel.setLayout(null);

        countdownPanel.setOpaque(false);
        countdownPanel.setLayout(null);

        numberCountdown.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 100)); // NOI18N
        numberCountdown.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        numberCountdown.setText("3");
        numberCountdown.setRequestFocusEnabled(false);
        numberCountdown.setVerifyInputWhenFocusTarget(false);
        countdownPanel.add(numberCountdown);
        numberCountdown.setBounds(55, 45, 90, 90);

        backgroundCronoStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/circulo.png"))); // NOI18N
        countdownPanel.add(backgroundCronoStart);
        backgroundCronoStart.setBounds(0, 0, 200, 200);
        countdownPanel.setVisible(false);

        gameJPanel.add(countdownPanel);
        countdownPanel.setBounds(450, 100, 200, 200);

        tglPause.setBackground(new java.awt.Color(30, 30, 30));
        tglPause.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        tglPause.setForeground(new java.awt.Color(255, 255, 255));
        tglPause.setText("Pause");
        tglPause.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tglPause.setFocusable(false);
        tglPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglPauseActionPerformed(evt);
            }
        });
        gameJPanel.add(tglPause);
        tglPause.setBounds(830, 880, 220, 40);
        backgroundPause = new javax.swing.JLabel();
        backgroundPause.setBackground(new java.awt.Color(70, 70, 70,240));
        backgroundPause.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundPause.setOpaque(true);
        backgroundPause.setVisible(false);
        gameJPanel.add(backgroundPause);
        backgroundPause.setBounds(0, 0, 1100, 950);

        gamePanel.setBackground(new java.awt.Color(204, 204, 255));
        gamePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gamePanel.setFocusable(false);
        gamePanel.setMaximumSize(new java.awt.Dimension(500, 900));
        gamePanel.setMinimumSize(new java.awt.Dimension(500, 900));
        gamePanel.setName(""); // NOI18N
        gamePanel.setOpaque(false);
        gamePanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                gamePanelKeyPressed(evt);
            }
        });
        gamePanel.setLayout(null);
        gameJPanel.add(gamePanel);
        gamePanel.setBounds(300, 30, 500, 900);

        lblBackgroundGame.setBackground(new java.awt.Color(153, 153, 153));
        lblBackgroundGame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondos/10x18backgroundGameSafeZone.png"))); // NOI18N
        lblBackgroundGame.setText("lblBackgroundGame");
        lblBackgroundGame.setMaximumSize(new java.awt.Dimension(500, 900));
        lblBackgroundGame.setMinimumSize(new java.awt.Dimension(500, 900));
        lblBackgroundGame.setOpaque(true);
        lblBackgroundGame.setPreferredSize(new java.awt.Dimension(500, 900));
        gameJPanel.add(lblBackgroundGame);
        lblBackgroundGame.setBounds(300, 30, 500, 900);
        lblBackgroundGame.getAccessibleContext().setAccessibleParent(gameJPanel);

        panelScore.setBackground(new java.awt.Color(231, 231, 231));
        panelScore.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelScore.setMinimumSize(new java.awt.Dimension(53, 53));
        panelScore.setOpaque(false);
        panelScore.setPreferredSize(new java.awt.Dimension(110, 110));
        panelScore.setLayout(null);

        lblScoreTitle.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblScoreTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblScoreTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblScoreTitle.setText("Score");
        lblScoreTitle.setMaximumSize(new java.awt.Dimension(100, 40));
        lblScoreTitle.setMinimumSize(new java.awt.Dimension(100, 40));
        lblScoreTitle.setPreferredSize(new java.awt.Dimension(100, 40));
        panelScore.add(lblScoreTitle);
        lblScoreTitle.setBounds(60, 5, 100, 40);

        lblScore.setBackground(new java.awt.Color(255, 255, 255));
        lblScore.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblScore.setForeground(new java.awt.Color(255, 255, 255));
        lblScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblScore.setText("0");
        lblScore.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblScore.setMaximumSize(new java.awt.Dimension(100, 40));
        lblScore.setMinimumSize(new java.awt.Dimension(100, 40));
        lblScore.setPreferredSize(new java.awt.Dimension(100, 40));
        panelScore.add(lblScore);
        lblScore.setBounds(20, 70, 180, 40);

        gameJPanel.add(panelScore);
        panelScore.setBounds(40, 40, 220, 130);

        panelNext.setBackground(new java.awt.Color(231, 231, 231));
        panelNext.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelNext.setMaximumSize(new java.awt.Dimension(220, 260));
        panelNext.setMinimumSize(new java.awt.Dimension(220, 260));
        panelNext.setOpaque(false);
        panelNext.setPreferredSize(new java.awt.Dimension(220, 260));
        panelNext.setLayout(null);

        lblNextTitle.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblNextTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblNextTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNextTitle.setText("Next");
        lblNextTitle.setMaximumSize(new java.awt.Dimension(100, 40));
        lblNextTitle.setMinimumSize(new java.awt.Dimension(100, 40));
        lblNextTitle.setPreferredSize(new java.awt.Dimension(100, 40));
        panelNext.add(lblNextTitle);
        lblNextTitle.setBounds(60, 10, 100, 40);

        panelNextFigure.setOpaque(false);
        panelNextFigure.setVerifyInputWhenFocusTarget(false);
        panelNextFigure.setLayout(null);
        panelNext.add(panelNextFigure);
        panelNextFigure.setBounds(10, 100, 200, 100);

        gameJPanel.add(panelNext);
        panelNext.setBounds(840, 190, 220, 240);

        panelLevel.setBackground(new java.awt.Color(231, 231, 231));
        panelLevel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelLevel.setOpaque(false);
        panelLevel.setPreferredSize(new java.awt.Dimension(220, 220));
        panelLevel.setLayout(null);

        lblLevelTitle.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblLevelTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblLevelTitle.setText("Level");
        panelLevel.add(lblLevelTitle);
        lblLevelTitle.setBounds(70, 10, 81, 48);

        progressLevel.setMaximum(5);
        progressLevel.setToolTipText("");
        progressLevel.setFocusable(false);
        panelLevel.add(progressLevel);
        progressLevel.setBounds(50, 140, 120, 110);

        lblLevel.setBackground(new java.awt.Color(255, 255, 255));
        lblLevel.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblLevel.setForeground(new java.awt.Color(255, 255, 255));
        lblLevel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLevel.setText("0");
        lblLevel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblLevel.setMaximumSize(new java.awt.Dimension(100, 40));
        lblLevel.setMinimumSize(new java.awt.Dimension(100, 40));
        lblLevel.setPreferredSize(new java.awt.Dimension(100, 40));
        panelLevel.add(lblLevel);
        lblLevel.setBounds(20, 70, 180, 40);

        gameJPanel.add(panelLevel);
        panelLevel.setBounds(40, 650, 220, 280);

        panelLine.setBackground(new java.awt.Color(231, 231, 231));
        panelLine.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelLine.setOpaque(false);
        panelLine.setLayout(null);

        lblLineTitle.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblLineTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblLineTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLineTitle.setText("Lines");
        lblLineTitle.setMaximumSize(new java.awt.Dimension(100, 40));
        lblLineTitle.setMinimumSize(new java.awt.Dimension(100, 40));
        lblLineTitle.setPreferredSize(new java.awt.Dimension(100, 40));
        panelLine.add(lblLineTitle);
        lblLineTitle.setBounds(60, 5, 100, 40);

        lblLine.setBackground(new java.awt.Color(255, 255, 255));
        lblLine.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblLine.setForeground(new java.awt.Color(255, 255, 255));
        lblLine.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLine.setText("0");
        lblLine.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblLine.setMaximumSize(new java.awt.Dimension(100, 40));
        lblLine.setMinimumSize(new java.awt.Dimension(100, 40));
        lblLine.setPreferredSize(new java.awt.Dimension(100, 40));
        panelLine.add(lblLine);
        lblLine.setBounds(20, 70, 180, 40);

        gameJPanel.add(panelLine);
        panelLine.setBounds(40, 500, 220, 130);

        panelTime.setBackground(new java.awt.Color(231, 231, 231));
        panelTime.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelTime.setMaximumSize(new java.awt.Dimension(220, 130));
        panelTime.setMinimumSize(new java.awt.Dimension(220, 130));
        panelTime.setOpaque(false);
        panelTime.setPreferredSize(new java.awt.Dimension(220, 130));
        panelTime.setLayout(null);

        lblTime.setBackground(new java.awt.Color(255, 255, 255));
        lblTime.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblTime.setForeground(new java.awt.Color(255, 255, 255));
        lblTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTime.setText("0");
        lblTime.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTime.setMaximumSize(new java.awt.Dimension(100, 40));
        lblTime.setMinimumSize(new java.awt.Dimension(100, 40));
        lblTime.setPreferredSize(new java.awt.Dimension(100, 40));
        panelTime.add(lblTime);
        lblTime.setBounds(20, 70, 180, 40);

        lblTimeTitle.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblTimeTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTimeTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTimeTitle.setText("Time");
        lblTimeTitle.setMaximumSize(new java.awt.Dimension(100, 40));
        lblTimeTitle.setMinimumSize(new java.awt.Dimension(100, 40));
        lblTimeTitle.setPreferredSize(new java.awt.Dimension(100, 40));
        panelTime.add(lblTimeTitle);
        lblTimeTitle.setBounds(60, 5, 100, 40);

        gameJPanel.add(panelTime);
        panelTime.setBounds(840, 40, 220, 130);

        backgroundProgram.setBackground(new java.awt.Color(27, 27, 27));
        backgroundProgram.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundProgram.setOpaque(true);
        gameJPanel.add(backgroundProgram);
        backgroundProgram.setBounds(0, 0, 1100, 950);

        getContentPane().add(gameJPanel);
        gameJPanel.setBounds(0, 0, 1100, 950);
        gameJPanel.setVisible(false);

        menuJPanel.setMaximumSize(new java.awt.Dimension(1100, 950));
        menuJPanel.setMinimumSize(new java.awt.Dimension(1100, 950));
        menuJPanel.setPreferredSize(new java.awt.Dimension(1100, 950));
        menuJPanel.setLayout(null);

        panelMainMenu.setBackground(new java.awt.Color(255, 255, 255,0));
        panelMainMenu.setBorder(new javax.swing.border.MatteBorder(null));
        panelMainMenu.setForeground(new java.awt.Color(255, 255, 255));
        panelMainMenu.setOpaque(false);
        panelMainMenu.setLayout(null);

        Playlbl.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 70)); // NOI18N
        Playlbl.setForeground(new java.awt.Color(255, 255, 255));
        Playlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Playlbl.setText("Play");
        Playlbl.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Playlbl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Playlbl.setFocusable(false);
        Playlbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        Playlbl.setNextFocusableComponent(gamePanel);
        Playlbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PlaylblMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                PlaylblMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                PlaylblMousePressed(evt);
            }
        });
        panelMainMenu.add(Playlbl);
        Playlbl.setBounds(50, 50, 310, 100);

        Exitlbl.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 70)); // NOI18N
        Exitlbl.setForeground(new java.awt.Color(255, 255, 255));
        Exitlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Exitlbl.setText("Exit");
        Exitlbl.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        Exitlbl.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Exitlbl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Exitlbl.setFocusable(false);
        Exitlbl.setNextFocusableComponent(gamePanel);
        Exitlbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ExitlblMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ExitlblMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ExitlblMousePressed(evt);
            }
        });
        panelMainMenu.add(Exitlbl);
        Exitlbl.setBounds(50, 450, 310, 100);

        levelJSlider.setMaximum(20);
        levelJSlider.setMinimum(1);
        levelJSlider.setValue(1);
        levelJSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        levelJSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                levelJSliderStateChanged(evt);
            }
        });
        levelJSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                levelJSliderMouseDragged(evt);
            }
        });
        levelJSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                levelJSliderMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                levelJSliderMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                levelJSliderMouseReleased(evt);
            }
        });
        panelMainMenu.add(levelJSlider);
        levelJSlider.setBounds(80, 320, 200, 30);

        levelLbl.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        levelLbl.setForeground(new java.awt.Color(255, 255, 255));
        levelLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        levelLbl.setText("1");
        levelLbl.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelMainMenu.add(levelLbl);
        levelLbl.setBounds(290, 310, 40, 40);

        levlLblTitle.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 60)); // NOI18N
        levlLblTitle.setForeground(new java.awt.Color(255, 255, 255));
        levlLblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        levlLblTitle.setText("Level");
        levlLblTitle.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        levlLblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        levlLblTitle.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        levlLblTitle.setFocusable(false);
        levlLblTitle.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        levlLblTitle.setNextFocusableComponent(gamePanel);
        panelMainMenu.add(levlLblTitle);
        levlLblTitle.setBounds(50, 230, 310, 140);

        menuJPanel.add(panelMainMenu);
        panelMainMenu.setBounds(50, 160, 400, 620);

        panelMainMenuBorder.setForeground(new java.awt.Color(255, 204, 153));
        panelMainMenuBorder.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        menuJPanel.add(panelMainMenuBorder);
        panelMainMenuBorder.setBounds(50, 160, 400, 620);

        backgroundImage.setBackground(new java.awt.Color(204, 204, 255));
        backgroundImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondos/backgroundMainMenu.png"))); // NOI18N
        backgroundImage.setFocusable(false);
        backgroundImage.setMaximumSize(new java.awt.Dimension(1100, 950));
        backgroundImage.setMinimumSize(new java.awt.Dimension(1100, 950));
        backgroundImage.setPreferredSize(new java.awt.Dimension(1100, 950));
        menuJPanel.add(backgroundImage);
        backgroundImage.setBounds(500, 160, 590, 620);

        backgroundColor.setBackground(new java.awt.Color(27, 27, 27));
        backgroundColor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundColor.setOpaque(true);
        menuJPanel.add(backgroundColor);
        backgroundColor.setBounds(0, 0, 1100, 950);

        getContentPane().add(menuJPanel);
        menuJPanel.setBounds(0, 0, 1100, 950);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Retrieves the panel where the game is displayed.
     *
     * @return The JPanel containing the game.
     */
    public JPanel getGamePanel() {
        return gamePanel;
    }

    /**
     * Retrieves the panel where the next piece is previewed.
     *
     * @return The JPanel containing the preview of the next piece.
     */
    public JPanel getPanelNextPiece() {
        return panelNextFigure;
    }

    /**
     * Retrieves the timer controlling the speed of the game.
     *
     * @return The Timer object controlling the game speed.
     */
    public Timer getTimerSpeedGame() {
        return timerSpeedGame;
    }

    /**
     * Retrieves the slider for adjusting the game level.
     *
     * @return The JSlider for adjusting the game level.
     */
    public JSlider getLevelJSlider() {
        return levelJSlider;
    }

    /**
     * Retrieves the current game instance.
     *
     * @return The Game object representing the current game.
     */
    public Game getGame() {
        return game;
    }

    /**
     * Retrieves the controller managing game sounds.
     *
     * @return The SoundController object managing game sounds.
     */
    public SoundController getSoundController() {
        return soundController;
    }

    /**
     * Retrieves the score threshold for completing a line in the game.
     *
     * @return The score threshold for completing a line.
     */
    public int getSCORELINE() {
        return SCORELINE;
    }

    /**
     * Retrieves the score awarded for touching the floor with a piece.
     *
     * @return The score awarded for touching the floor.
     */
    public int getSCORETOUCHFLOOR() {
        return SCORETOUCHFLOOR;
    }

    /**
     * Retrieves the score threshold for leveling up in the game.
     *
     * @return The score threshold for leveling up.
     */
    public int getSCORELEVELUP() {
        return SCORELEVELUP;
    }

    /**
     * Retrieves the controller managing exceptions and logging.
     *
     * @return The LogExceptionController managing exceptions and logging.
     */
    public LogExceptionController getLogException() {
        return logException;
    }

    // </editor-fold>  
    // <editor-fold defaultstate="collapsed" desc="Listeners">      
    /**
     * Handles the event when the pause toggle button is selected or deselected.
     * If selected, pauses the game and modifies the button to say "Resume". If
     * deselected, resumes the game and modifies the button to say "Pause".
     *
     * @param evt The action event of the pause toggle button.
     */
    private void tglPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglPauseActionPerformed
        if (tglPause.isSelected()) {
            pauseGame();
            tglPauseModificationPause();

        } else {
            resumeGame();
            tglPauseModificationResume();

        }
    }//GEN-LAST:event_tglPauseActionPerformed
    /**
     * Modifies the pause button to indicate that the game is paused.
     */
    private void tglPauseModificationPause() {
        pausePanel.add(tglPause);

        tglPause.setBounds(110, 140, 230, 40);
        tglPause.setText("Resume");
    }

    /**
     * Modifies the pause button to indicate that the game is ongoing.
     */
    private void tglPauseModificationResume() {
        gameJPanel.add(tglPause);
        gameJPanel.setComponentZOrder(tglPause, 0);
        tglPause.setBounds(830, 880, 220, 40);
        gameJPanel.updateUI();
        tglPause.updateUI();
        tglPause.setText("Pause");
    }

    /**
     * Handles events when keys are pressed while the game is ongoing. Controls
     * piece movements and game pausing.
     *
     * @param evt The key event.
     */
    private void gamePanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_gamePanelKeyPressed

        if (!game.isGameOver()) {
            switch (evt.getKeyCode()) {
                case KeyEvent.VK_LEFT, KeyEvent.VK_A ->
                    game.moveLeft();
                case KeyEvent.VK_UP, KeyEvent.VK_W ->
                    game.rotatePiece();
                case KeyEvent.VK_RIGHT, KeyEvent.VK_D ->
                    game.moveRight();
                case KeyEvent.VK_DOWN, KeyEvent.VK_S -> {
                    game.movePieceDown();
                    timerSpeedGame.restart();
                }
                case KeyEvent.VK_SPACE -> {
                    game.movePieceDownToBottom(game.getCurrentPiece());
                    game.movePieceDown();
                }
                case KeyEvent.VK_P, KeyEvent.VK_ESCAPE -> {
                    if (!gameOverPanel.isVisible()) {
                        tglPause.setSelected(true);
                        tglPauseModificationPause();
                        pauseGame();
                    }
                }
            }

        }
    }//GEN-LAST:event_gamePanelKeyPressed
    /**
     * Restarts the game after it ends.
     *
     * @param evt The action event of the restart button on the Game Over
     * screen.
     */
    private void restartGameOverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartGameOverActionPerformed
        prepareGame();


    }//GEN-LAST:event_restartGameOverActionPerformed
    /**
     * Restarts the game after pausing. Modifies the pause button to indicate
     * that the game is ongoing.
     *
     * @param evt The action event of the restart button on the Pause screen.
     */
    private void restartPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartPauseActionPerformed
        tglPauseModificationResume();
        prepareGame();

    }//GEN-LAST:event_restartPauseActionPerformed
    /**
     * Takes the player back to the main menu from the Game Over screen. Hides
     * the Game Over screen and shows the main menu screen.
     *
     * @param evt The action event of the Main Menu button on the Game Over
     * screen.
     */
    private void mainMenuGameOverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuGameOverActionPerformed
        pause();
        backgroundPause.setVisible(false);
        tglPause.setVisible(true);
        gameOverPanel.setVisible(false);
        menuJPanel.setVisible(true);
        gameJPanel.setVisible(false);
        closeCurrentGame();

    }//GEN-LAST:event_mainMenuGameOverActionPerformed
    /**
     * Takes the player back to the main menu from the Pause screen. Modifies
     * the pause button to indicate that the game is ongoing.
     *
     * @param evt The action event of the Main Menu button on the Pause screen.
     */
    private void mainMenuPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuPauseActionPerformed

        tglPauseModificationResume();
        backgroundPause.setVisible(false);
        tglPause.setSelected(false);
        pausePanel.setVisible(false);
        menuJPanel.setVisible(true);
        gameJPanel.setVisible(false);
        closeCurrentGame();

    }//GEN-LAST:event_mainMenuPauseActionPerformed
    /**
     * Handles changes in the level slider by updating the displayed level
     * value.
     *
     * @param evt The change event of the level slider.
     */
    private void levelJSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_levelJSliderStateChanged
        levelLbl.setText(String.valueOf(levelJSlider.getValue()));
    }//GEN-LAST:event_levelJSliderStateChanged
    /**
     * Handles key events when the pause panel is active, allowing the player to
     * resume the game.
     *
     * @param evt The key event on the pause panel.
     */
    private void pausePanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pausePanelKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_P || evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            if (tglPause.isSelected()) {
                tglPause.setSelected(false);
                tglPauseModificationResume();
                pauseGame();
            }
        }
    }//GEN-LAST:event_pausePanelKeyPressed
    /**
     * Prepares the game and switches from the main menu to the game screen when
     * the Play label is pressed. Hides the main menu screen and shows the game
     * screen.
     *
     * @param evt The mouse event of pressing the Play label.
     */
    private void PlaylblMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PlaylblMousePressed

        prepareGame();
        menuJPanel.setVisible(false);
        gameJPanel.setVisible(true);

    }//GEN-LAST:event_PlaylblMousePressed
    /**
     * Exits the game when the Exit label is pressed.
     */
    private void ExitlblMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitlblMousePressed
        System.exit(0);
    }//GEN-LAST:event_ExitlblMousePressed
    /**
     * Changes the color of the Exit label when the mouse enters its area.
     *
     * @param evt The mouse event of entering the Exit label.
     */
    private void ExitlblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitlblMouseEntered
        Exitlbl.setForeground(new java.awt.Color(251, 61, 133));
    }//GEN-LAST:event_ExitlblMouseEntered
    /**
     * Restores the color of the Exit label when the mouse exits its area.
     *
     * @param evt The mouse event of exiting the Exit label.
     */
    private void ExitlblMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitlblMouseExited
        Exitlbl.setForeground(Color.white);
    }//GEN-LAST:event_ExitlblMouseExited
    /**
     * Changes the color of the Play label when the mouse enters its area.
     *
     * @param evt The mouse event of entering the Play label.
     */
    private void PlaylblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PlaylblMouseEntered
        Playlbl.setForeground(new java.awt.Color(251, 61, 133));
    }//GEN-LAST:event_PlaylblMouseEntered
    /**
     * Restores the color of the Play label when the mouse exits its area.
     *
     * @param evt The mouse event of exiting the Play label.
     */
    private void PlaylblMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PlaylblMouseExited
        Playlbl.setForeground(Color.white);
    }//GEN-LAST:event_PlaylblMouseExited
    /**
     * Changes the color of the level slider title when the mouse enters its
     * area.
     *
     * @param evt The mouse event of entering the level slider.
     */
    private void levelJSliderMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_levelJSliderMouseEntered
        levlLblTitle.setForeground(new java.awt.Color(251, 61, 133));
    }//GEN-LAST:event_levelJSliderMouseEntered
    /**
     * Restores the color of the level slider title when the mouse exits its
     * area.
     *
     * @param evt The mouse event of exiting the level slider.
     */
    private void levelJSliderMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_levelJSliderMouseExited
        levlLblTitle.setForeground(Color.white);
    }//GEN-LAST:event_levelJSliderMouseExited
    /**
     * Changes the color of the level slider title when the slider is dragged.
     *
     * @param evt The mouse event of dragging the level slider.
     */
    private void levelJSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_levelJSliderMouseDragged
        levlLblTitle.setForeground(new java.awt.Color(251, 61, 133));
    }//GEN-LAST:event_levelJSliderMouseDragged
    /**
     * Restores the color of the level slider title when the slider is released
     * after dragging.
     *
     * @param evt The mouse event of releasing the level slider after dragging.
     */
    private void levelJSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_levelJSliderMouseReleased
        levlLblTitle.setForeground(Color.white);
    }//GEN-LAST:event_levelJSliderMouseReleased

    // </editor-fold>
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainWindow().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Exitlbl;
    private javax.swing.JLabel Playlbl;
    private javax.swing.JLabel backgroundColor;
    private javax.swing.JLabel backgroundCronoStart;
    private javax.swing.JLabel backgroundImage;
    private javax.swing.JLabel backgroundProgram;
    private javax.swing.JLabel borderlbl;
    private javax.swing.JPanel countdownPanel;
    private javax.swing.JPanel gameJPanel;
    private javax.swing.JLabel backgroundPause;
    private javax.swing.JPanel gameOverPanel;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JLabel lblBackgroundGame;
    private javax.swing.JLabel lblLevel;
    private javax.swing.JLabel lblLevelTitle;
    private javax.swing.JLabel lblLine;
    private javax.swing.JLabel lblLineTitle;
    private javax.swing.JLabel lblNextTitle;
    private javax.swing.JLabel lblScore;
    private javax.swing.JLabel lblScoreTitle;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblTimeTitle;
    private javax.swing.JLabel levelGameOver;
    private javax.swing.JSlider levelJSlider;
    private javax.swing.JLabel levelLbl;
    private javax.swing.JLabel levelTile;
    private javax.swing.JLabel levlLblTitle;
    private javax.swing.JLabel linesGameOver;
    private javax.swing.JLabel linesTitle;
    private javax.swing.JButton mainMenuGameOver;
    private javax.swing.JButton mainMenuPause;
    private javax.swing.JPanel menuJPanel;
    private javax.swing.JLabel numberCountdown;
    private javax.swing.JPanel panelLevel;
    private javax.swing.JPanel panelLine;
    private javax.swing.JPanel panelMainMenu;
    private javax.swing.JLabel panelMainMenuBorder;
    private javax.swing.JPanel panelNext;
    private javax.swing.JPanel panelNextFigure;
    private javax.swing.JPanel panelScore;
    private javax.swing.JPanel panelTime;
    private javax.swing.JPanel pausePanel;
    private javax.swing.JLabel pauseTitle;
    private style.CircleProgressBar progressLevel;
    private javax.swing.JButton restartGameOver;
    private javax.swing.JButton restartPause;
    private javax.swing.JLabel scoreGameOver;
    private javax.swing.JLabel scoreTitle;
    private javax.swing.JToggleButton tglPause;
    private javax.swing.JLabel timeGameOver;
    private javax.swing.JLabel timeTitle;
    private javax.swing.JLabel youLoseTitle;
    // End of variables declaration//GEN-END:variables

    /**
     * Paints the specified piece on the game board.
     *
     * @param piece the piece to paint
     */
//   if (!(piece instanceof PieceI) && !(piece instanceof PieceO) && !(piece instanceof PieceT)) 
    public void paintPiece(Piece piece) {
        Iterator<Block> current = piece.getBlocks().iterator();

        while (current.hasNext()) {

            Block currentBlock = current.next();
            paintBlock(currentBlock.getLabel(), piece.getParent());
        }
    }

    /**
     * Adds a label representing a block to the game panel and sets its size and
     * border.
     *
     * @param lblBlock The label representing the block.
     * @param panel The panel to which the block label will be added.
     */
    public void paintBlock(JLabel lblBlock, JPanel panel) {

        decorateBlock(lblBlock);
        panel.add(lblBlock);
    }

    /**
     * Paints a translucent block label on the game panel.
     *
     * @param lblBlock The label representing the block.
     * @param panel The panel to which the block label will be added.
     */
    public void paintGhostBlock(JLabel lblBlock, JPanel panel) {

        lblBlock.setBackground(new java.awt.Color(lblBlock.getBackground().getRed(), lblBlock.getBackground().getGreen(), lblBlock.getBackground().getBlue(), 100));

        decorateBlock(lblBlock);
        panel.add(lblBlock);
    }

    private void decorateBlock(JLabel lblBlock) {
        lblBlock.setSize(game.getBLOCK_SIDE(), game.getBLOCK_SIDE());
        lblBlock.setOpaque(true);
        lblBlock.setBorder(BorderFactory.createLineBorder(Color.black, 2));
    }

    /**
     * Removes a block label from the game panel.
     *
     * @param lblBlock The label representing the block to be removed.
     */
    public void eraseBlock(JLabel lblBlock) {
        gamePanel.remove(lblBlock);
    }

    /**
     * Removes all components from NextFigure Panel.
     */
    public void clearNextFigurePanel() {
        panelNextFigure.setLocation(initialPositionNextFigureX, panelNextFigure.getY());
        panelNextFigure.removeAll();
        panelNextFigure.updateUI();
    }

    /**
     * Stops the game and displays the game over menu.
     */
    public void showGameOverMenu() {
        pause();

        backgroundPause.setVisible(true);
        gameOverPanel.setVisible(true);
        scoreGameOver.setText(lblScore.getText());
        timeGameOver.setText(lblTime.getText());
        linesGameOver.setText(lblLine.getText());
        levelGameOver.setText(lblLevel.getText());
        tglPause.setVisible(false);

    }

    private void pause() {

        timerSpeedGame.stop();
        timerFPS.stop();
        scoreCounterTimer.stop();
        timer.stop();
        soundController.pauseBSO();

    }

    /**
     * Creates a new game with all values set to 0 and initializes sound and
     * timers.
     */
    private void startGame() {
        game = new Game(this, getLevelJSlider().getValue());
        game.setInitialDifficulty(game.getMIN_DIFFICULTY() - (game.getDIFFICULTY_PER_LEVEL() * levelJSlider.getValue()));
        speedGameDelay = game.getInitialDifficulty();
        tglPause.setVisible(true);
        backgroundPause.setVisible(false);
        game.startGame();

        startRefreshScreen();
        startTimer();
        gamePanel.setFocusable(true);
        gamePanel.requestFocus();
        startSpeed();
        scoreCounter();

    }

    /**
     * Pauses the game and shows the pause menu.
     */
    private void pauseGame() {
        pause();
        backgroundPause.setVisible(true);
        pausePanel.setVisible(true);
        pausePanel.requestFocus();
    }

    /**
     * Resumes the game and hides the pause menu.
     */
    private void resumeGame() {
        backgroundPause.setVisible(false);
        pausePanel.setVisible(false);
        resume();
    }

    /**
     * Resumes the timers and sound.
     */
    private void resume() {
        timerFPS.start();
        timer.start();
        timerSpeedGame.start();
        scoreCounterTimer.start();
        soundController.resumeBSO();
    }

    /**
     * Prepares the game interface for a new game.
     */
    private void prepareGame() {
        tglPause.setVisible(false);
        pausePanel.setVisible(false);
        backgroundPause.setVisible(true);
        gameOverPanel.setVisible(false);
        countdownPanel.setVisible(true);
       soundController.playBSO();
        tglPause.setSelected(false);
        clearGamePanel();
        gamePanel.updateUI();
        initializeCounters();
        startCountdown();

    }

    /**
     * Starts the countdown for the game to begin.
     */
    private void startCountdown() {
        countdownPanel.setVisible(true);

        actualCountDown = TimeCountDown;
        numberCountdown.setText(String.valueOf(actualCountDown));

        timerCountDown = new Timer(700, (ActionEvent e) -> {
            actualCountDown--;
            numberCountdown.setText(String.valueOf(actualCountDown));

            if (actualCountDown <= 0) {

                startGame();

                timerCountDown.stop();
                countdownPanel.setVisible(false);
            }
        });

        timerCountDown.start();
    }

    /**
     * Initializes game counters for a new game.
     */
    private void initializeCounters() {

        score = 0;
        scoreToAdd = 0;
        progressLevel.setValue(0);

        lblScore.setText(String.valueOf(score));
        lblLine.setText(String.valueOf(0));
        lblLevel.setText(String.valueOf(0));
        progressLevel.setValue(0);
        lblTime.setText(String.format("%02d", 0));
    }

    /**
     * Clears the game panel.
     */
    private void clearGamePanel() {
        gamePanel.removeAll();
        gamePanel.updateUI();
        clearNextFigurePanel();
    }

    /**
     * Closes the current game, clearing the panel and setting timer objects to
     * null.
     */
    private void closeCurrentGame() {
        clearGamePanel();
        timer = null;
        timerSpeedGame = null;
        timerFPS = null;
        game = null;
    }

// SCORE SECTION
    /**
     * Timer to gradually increase the score and avoid adding it all at once.
     */
    private void scoreCounter() {
        scoreCounterTimer = new Timer(10, (ActionEvent e) -> {
            if (scoreToAdd > 0) {
                increaseScore();
            }
        });

        scoreCounterTimer.start();
    }

    /**
     * Increases the pending score to be added.
     */
    private void increaseScore() {
        score++;
        scoreToAdd--;
    }

    /**
     * Adds points to the pending score.
     *
     * @param points The points to be added to the pending score.
     */
    public void addToPendingScore(int points) {
        scoreToAdd += points;
    }

// TIMERS SECTION
    /**
     * Starts the main game timer.
     */
    private void startTimer() {
        timer = new Timer(1000, (ActionEvent e) -> {
            gameTime++;

            if (game.getLevel() > BLOCKINCREASELEVEL && gameTime % TIMEINCREASESBLOCK == 0) {
                game.addRandomBlocks();
            }

        });
        timer.start();
    }

    /**
     * Starts the speed timer responsible for calling the moveDown() method.
     */
    private void startSpeed() {
        timerSpeedGame = new Timer(speedGameDelay, (ActionEvent e) -> game.movePieceDown());
        timerSpeedGame.start();
    }

    /**
     * Starts the refresh screen timer responsible for updating panels every 20
     * milliseconds.
     */
    private void startRefreshScreen() {
        timerFPS = new Timer(20, (ActionEvent e) -> {
            SwingUtilities.invokeLater(() -> {
                lblScore.setText(String.valueOf(score));
                lblLine.setText(String.valueOf(game.getLineCount()));
                lblLevel.setText(String.valueOf(game.getLevel()));
                progressLevel.setValue(game.getLinesToNextLevel());
                lblTime.setText(String.format("%02d", gameTime));
                gamePanel.updateUI();
            });
        });
        timerFPS.start();
    }
}
